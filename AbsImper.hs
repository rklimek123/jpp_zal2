-- File generated by the BNF Converter (bnfc 2.9.4).

{-# LANGUAGE DeriveTraversable #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE GeneralizedNewtypeDeriving #-}
{-# LANGUAGE LambdaCase #-}
{-# LANGUAGE PatternSynonyms #-}

-- | The abstract syntax of language Imper.

module AbsImper where

import Prelude (Integer, String)
import qualified Prelude as C
  ( Eq, Ord, Show, Read
  , Functor, Foldable, Traversable
  , Int, Maybe(..)
  )
import qualified Data.String

type Program = Program' BNFC'Position
data Program' a = Prog a [ProgStmt' a]
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Functor, C.Foldable, C.Traversable)

type ProgStmt = ProgStmt' BNFC'Position
data ProgStmt' a
    = FnDef a (Type' a) Ident [Arg' a] (Block' a) | ProgSt a (Stmt' a)
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Functor, C.Foldable, C.Traversable)

type Arg = Arg' BNFC'Position
data Arg' a = FnArg a (Type' a) Ident
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Functor, C.Foldable, C.Traversable)

type Block = Block' BNFC'Position
data Block' a = StBlock a [Stmt' a]
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Functor, C.Foldable, C.Traversable)

type Stmt = Stmt' BNFC'Position
data Stmt' a
    = Decl a (AStmt' a)
    | DeclRO a (AStmt' a)
    | AssStmt a (AStmt' a)
    | TupleAss a (TBox' a) (Expr' a)
    | Cond a (IfBl' a) [ElifBl' a]
    | CondElse a (IfBl' a) [ElifBl' a] (ElseBl' a)
    | For a (AStmt' a) (Expr' a) (Block' a)
    | While a (Expr' a) (Block' a)
    | Ret a (Expr' a)
    | Break a
    | Continue a
    | Print a (Expr' a)
    | Skip a
    | SExp a (Expr' a)
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Functor, C.Foldable, C.Traversable)

type AStmt = AStmt' BNFC'Position
data AStmt' a = Ass a Ident (Expr' a)
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Functor, C.Foldable, C.Traversable)

type TBox = TBox' BNFC'Position
data TBox' a = TupleBox a [TElem' a]
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Functor, C.Foldable, C.Traversable)

type TElem = TElem' BNFC'Position
data TElem' a
    = TupleTup a (TBox' a) | TupleAtom a Ident | TupleIgn a
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Functor, C.Foldable, C.Traversable)

type IfBl = IfBl' BNFC'Position
data IfBl' a = IfBlock a (Expr' a) (Block' a)
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Functor, C.Foldable, C.Traversable)

type ElifBl = ElifBl' BNFC'Position
data ElifBl' a = ElifBlock a (Expr' a) (Block' a)
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Functor, C.Foldable, C.Traversable)

type ElseBl = ElseBl' BNFC'Position
data ElseBl' a = ElseBlock a (Block' a)
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Functor, C.Foldable, C.Traversable)

type Type = Type' BNFC'Position
data Type' a = Int a | Str a | Bool a | Tuple a [Type' a]
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Functor, C.Foldable, C.Traversable)

type Expr = Expr' BNFC'Position
data Expr' a
    = EVar a Ident
    | ELitInt a Integer
    | ELitTrue a
    | ELitFalse a
    | ELitTuple a [Expr' a]
    | EApp a Ident [Expr' a]
    | EString a String
    | Neg a (Expr' a)
    | Not a (Expr' a)
    | EMul a (Expr' a) (MulOp' a) (Expr' a)
    | EAdd a (Expr' a) (AddOp' a) (Expr' a)
    | ERel a (Expr' a) (RelOp' a) (Expr' a)
    | EAnd a (Expr' a) (Expr' a)
    | EOr a (Expr' a) (Expr' a)
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Functor, C.Foldable, C.Traversable)

type AddOp = AddOp' BNFC'Position
data AddOp' a = Plus a | Minus a
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Functor, C.Foldable, C.Traversable)

type MulOp = MulOp' BNFC'Position
data MulOp' a = Times a | Div a | Mod a
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Functor, C.Foldable, C.Traversable)

type RelOp = RelOp' BNFC'Position
data RelOp' a = LTH a | LE a | GTH a | GE a | EQU a | NE a
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Functor, C.Foldable, C.Traversable)

newtype Ident = Ident String
  deriving (C.Eq, C.Ord, C.Show, C.Read, Data.String.IsString)

-- | Start position (line, column) of something.

type BNFC'Position = C.Maybe (C.Int, C.Int)

pattern BNFC'NoPosition :: BNFC'Position
pattern BNFC'NoPosition = C.Nothing

pattern BNFC'Position :: C.Int -> C.Int -> BNFC'Position
pattern BNFC'Position line col = C.Just (line, col)

-- | Get the start position of something.

class HasPosition a where
  hasPosition :: a -> BNFC'Position

instance HasPosition Program where
  hasPosition = \case
    Prog p _ -> p

instance HasPosition ProgStmt where
  hasPosition = \case
    FnDef p _ _ _ _ -> p
    ProgSt p _ -> p

instance HasPosition Arg where
  hasPosition = \case
    FnArg p _ _ -> p

instance HasPosition Block where
  hasPosition = \case
    StBlock p _ -> p

instance HasPosition Stmt where
  hasPosition = \case
    Decl p _ -> p
    DeclRO p _ -> p
    AssStmt p _ -> p
    TupleAss p _ _ -> p
    Cond p _ _ -> p
    CondElse p _ _ _ -> p
    For p _ _ _ -> p
    While p _ _ -> p
    Ret p _ -> p
    Break p -> p
    Continue p -> p
    Print p _ -> p
    Skip p -> p
    SExp p _ -> p

instance HasPosition AStmt where
  hasPosition = \case
    Ass p _ _ -> p

instance HasPosition TBox where
  hasPosition = \case
    TupleBox p _ -> p

instance HasPosition TElem where
  hasPosition = \case
    TupleTup p _ -> p
    TupleAtom p _ -> p
    TupleIgn p -> p

instance HasPosition IfBl where
  hasPosition = \case
    IfBlock p _ _ -> p

instance HasPosition ElifBl where
  hasPosition = \case
    ElifBlock p _ _ -> p

instance HasPosition ElseBl where
  hasPosition = \case
    ElseBlock p _ -> p

instance HasPosition Type where
  hasPosition = \case
    Int p -> p
    Str p -> p
    Bool p -> p
    Tuple p _ -> p

instance HasPosition Expr where
  hasPosition = \case
    EVar p _ -> p
    ELitInt p _ -> p
    ELitTrue p -> p
    ELitFalse p -> p
    ELitTuple p _ -> p
    EApp p _ _ -> p
    EString p _ -> p
    Neg p _ -> p
    Not p _ -> p
    EMul p _ _ _ -> p
    EAdd p _ _ _ -> p
    ERel p _ _ _ -> p
    EAnd p _ _ -> p
    EOr p _ _ -> p

instance HasPosition AddOp where
  hasPosition = \case
    Plus p -> p
    Minus p -> p

instance HasPosition MulOp where
  hasPosition = \case
    Times p -> p
    Div p -> p
    Mod p -> p

instance HasPosition RelOp where
  hasPosition = \case
    LTH p -> p
    LE p -> p
    GTH p -> p
    GE p -> p
    EQU p -> p
    NE p -> p

