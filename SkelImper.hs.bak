-- File generated by the BNF Converter (bnfc 2.9.4).

-- Templates for pattern matching on abstract syntax

{-# OPTIONS_GHC -fno-warn-unused-matches #-}

module SkelImper where

import Prelude (($), Either(..), String, (++), Show, show)
import qualified AbsImper

type Err = Either String
type Result = Err String

failure :: Show a => a -> Result
failure x = Left $ "Undefined case: " ++ show x

transIdent :: AbsImper.Ident -> Result
transIdent x = case x of
  AbsImper.Ident string -> failure x

transProgram :: Show a => AbsImper.Program' a -> Result
transProgram x = case x of
  AbsImper.Prog _ progstmts -> failure x

transProgStmt :: Show a => AbsImper.ProgStmt' a -> Result
transProgStmt x = case x of
  AbsImper.FnDef _ ident args block -> failure x
  AbsImper.ProgSt _ stmt -> failure x

transArg :: Show a => AbsImper.Arg' a -> Result
transArg x = case x of
  AbsImper.FnArg _ type_ ident -> failure x

transBlock :: Show a => AbsImper.Block' a -> Result
transBlock x = case x of
  AbsImper.StBlock _ stmts -> failure x

transStmt :: Show a => AbsImper.Stmt' a -> Result
transStmt x = case x of
  AbsImper.Decl _ astmt -> failure x
  AbsImper.DeclRO _ astmt -> failure x
  AbsImper.AssStmt _ astmt -> failure x
  AbsImper.TupleAss _ tbox expr -> failure x
  AbsImper.Cond _ ifbl elifbls -> failure x
  AbsImper.CondElse _ ifbl elifbls elsebl -> failure x
  AbsImper.For _ astmt expr block -> failure x
  AbsImper.While _ expr block -> failure x
  AbsImper.Ret _ expr -> failure x
  AbsImper.Break _ -> failure x
  AbsImper.Continue _ -> failure x
  AbsImper.Print _ expr -> failure x
  AbsImper.Skip _ -> failure x
  AbsImper.SExp _ expr -> failure x

transAStmt :: Show a => AbsImper.AStmt' a -> Result
transAStmt x = case x of
  AbsImper.Ass _ ident expr -> failure x

transTBox :: Show a => AbsImper.TBox' a -> Result
transTBox x = case x of
  AbsImper.TupleBox _ telems -> failure x

transTElem :: Show a => AbsImper.TElem' a -> Result
transTElem x = case x of
  AbsImper.TupleTup _ tbox -> failure x
  AbsImper.TupleAtom _ ident -> failure x
  AbsImper.TupleIgn _ -> failure x

transIfBl :: Show a => AbsImper.IfBl' a -> Result
transIfBl x = case x of
  AbsImper.IfBlock _ expr block -> failure x

transElifBl :: Show a => AbsImper.ElifBl' a -> Result
transElifBl x = case x of
  AbsImper.ElifBlock _ expr block -> failure x

transElseBl :: Show a => AbsImper.ElseBl' a -> Result
transElseBl x = case x of
  AbsImper.ElseBlock _ block -> failure x

transType :: Show a => AbsImper.Type' a -> Result
transType x = case x of
  AbsImper.Int _ -> failure x
  AbsImper.Str _ -> failure x
  AbsImper.Bool _ -> failure x
  AbsImper.Tuple _ types -> failure x

transExpr :: Show a => AbsImper.Expr' a -> Result
transExpr x = case x of
  AbsImper.EVar _ ident -> failure x
  AbsImper.ELitInt _ integer -> failure x
  AbsImper.ELitTrue _ -> failure x
  AbsImper.ELitFalse _ -> failure x
  AbsImper.ELitTuple _ exprs -> failure x
  AbsImper.EApp _ ident exprs -> failure x
  AbsImper.EString _ string -> failure x
  AbsImper.Neg _ expr -> failure x
  AbsImper.Not _ expr -> failure x
  AbsImper.EMul _ expr1 mulop expr2 -> failure x
  AbsImper.EAdd _ expr1 addop expr2 -> failure x
  AbsImper.ERel _ expr1 relop expr2 -> failure x
  AbsImper.EAnd _ expr1 expr2 -> failure x
  AbsImper.EOr _ expr1 expr2 -> failure x

transAddOp :: Show a => AbsImper.AddOp' a -> Result
transAddOp x = case x of
  AbsImper.Plus _ -> failure x
  AbsImper.Minus _ -> failure x

transMulOp :: Show a => AbsImper.MulOp' a -> Result
transMulOp x = case x of
  AbsImper.Times _ -> failure x
  AbsImper.Div _ -> failure x
  AbsImper.Mod _ -> failure x

transRelOp :: Show a => AbsImper.RelOp' a -> Result
transRelOp x = case x of
  AbsImper.LTH _ -> failure x
  AbsImper.LE _ -> failure x
  AbsImper.GTH _ -> failure x
  AbsImper.GE _ -> failure x
  AbsImper.EQU _ -> failure x
  AbsImper.NE _ -> failure x
