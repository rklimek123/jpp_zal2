Rozwiązanie używa statycznego sprawdzania typów.
Najpierw przeparsowany program przekazywany jest do typeCheckera.

TypeChecker wyłapuje większość błędów:
    - niezgodność typów,
    - break, continue poza pętlą,
    - return poza funkcją
    - przypisanie na zmienną read-only
    - przysłonięcie zmiennej read-only

Podczas interpretacji mogą wystąpić błędy czasu wykonania:
    - funkcja niczego nie zwróci
      (nie napotkamy na wyrażenie `return`
            przy wykonywaniu ciała funkcji)
    - dzielenie przez 0
    - modulo przez 0

W obu modułach (TypecheckImper, InterpreterImper) wykorzystana jest
Monada State z transformacją ExceptT.

Stanem w Typecheckerze jest:
    - Środowisko funkcji: nazwa -> typ
    - Środowisko zmiennych: nazwa -> typ
    - Czy jesteśmy w pętli?
    - Czy jesteśmy w bloku funkcji?

Typ funkcji składa się ze zwracanego typu i typów argumentów.
Typ zmiennej składa się z jej typu i informacji, czy jest read-only.

Stanem w Interpreterze jest:
    - Środowisko funkcji: nazwa -> dane
    - Środowisko zmiennych: nazwa -> lokalizacja
    - Skład: lokalizacja -> wartość
    - Następna wolna lokalizacja w składzie.
    - Całe wyjście na stdOut dotychczas wykonanych instrukcji, w formie ShowS.

Danymi funkcji, są:
    - Środowisko funkcji, w jakim została zadeklarowana (+ obsługa rekurencji)
    - Środowisko zmiennych, w jakim została zadeklarowana (bez argumentów)
    - Lista argumentów funkcji, lista postaci (Typ Nazwa)
    - Blok instrukcji funkcji.


Poprawki do specyfikacji języka, począwszy od terminu pierwszej części zadania:
    - Definicja funkcji: typ zwracany zamiast słowa kluczowego "fun".
    - Nie mozna przysłonić zmiennej read-only.
    - Brak zwrócenia wartości przez funkcję jest błędem czasu wykonania.
    - Błędy, które obsługuje typechecker,
      to również użycie return, break i continue w złych miejscach.
    - Zmiana składni krotek.
    - Zmiana listy możlwiych błędów czasu wykonania.
    - Pętla for iterowana w kolejności malejącej, czyli np. `for i:=10 to 1`
      nie powoduje nieskończonej pętli, ale iteruje w kolejności malejącej.

Poprawiona składnia dla krotek, przykłady:
    - typ:          <int, <int, string>, <bool, int> >
    - literał:      << << 1, 2 >>, _T >>
    - odpakowanie:  [a, _, [b, c]] :=: tup;
Więcej przykładów w pliku `15-tuples.imp`.