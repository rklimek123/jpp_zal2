-- -*- haskell -*- File generated by the BNF Converter (bnfc 2.9.4).

-- Parser definition for use with Happy
{
{-# OPTIONS_GHC -fno-warn-incomplete-patterns -fno-warn-overlapping-patterns #-}
{-# LANGUAGE PatternSynonyms #-}

module ParImper
  ( happyError
  , myLexer
  , pProgram
  ) where

import Prelude

import qualified AbsImper
import LexImper

}

%name pProgram_internal Program
-- no lexer declaration
%monad { Err } { (>>=) } { return }
%tokentype {Token}
%token
  '!'        { PT _ (TS _ 1)  }
  '!='       { PT _ (TS _ 2)  }
  '%'        { PT _ (TS _ 3)  }
  '&&'       { PT _ (TS _ 4)  }
  '('        { PT _ (TS _ 5)  }
  ')'        { PT _ (TS _ 6)  }
  '*'        { PT _ (TS _ 7)  }
  '+'        { PT _ (TS _ 8)  }
  ','        { PT _ (TS _ 9)  }
  '-'        { PT _ (TS _ 10) }
  '/'        { PT _ (TS _ 11) }
  ':='       { PT _ (TS _ 12) }
  ';'        { PT _ (TS _ 13) }
  '<'        { PT _ (TS _ 14) }
  '<='       { PT _ (TS _ 15) }
  '=='       { PT _ (TS _ 16) }
  '>'        { PT _ (TS _ 17) }
  '>='       { PT _ (TS _ 18) }
  '_'        { PT _ (TS _ 19) }
  '_F'       { PT _ (TS _ 20) }
  '_T'       { PT _ (TS _ 21) }
  'bool'     { PT _ (TS _ 22) }
  'break'    { PT _ (TS _ 23) }
  'const'    { PT _ (TS _ 24) }
  'continue' { PT _ (TS _ 25) }
  'elif'     { PT _ (TS _ 26) }
  'else'     { PT _ (TS _ 27) }
  'for'      { PT _ (TS _ 28) }
  'fun'      { PT _ (TS _ 29) }
  'if'       { PT _ (TS _ 30) }
  'int'      { PT _ (TS _ 31) }
  'print'    { PT _ (TS _ 32) }
  'return'   { PT _ (TS _ 33) }
  'skip'     { PT _ (TS _ 34) }
  'string'   { PT _ (TS _ 35) }
  'to'       { PT _ (TS _ 36) }
  'var'      { PT _ (TS _ 37) }
  'while'    { PT _ (TS _ 38) }
  '{'        { PT _ (TS _ 39) }
  '||'       { PT _ (TS _ 40) }
  '};'       { PT _ (TS _ 41) }
  L_Ident    { PT _ (TV _)    }
  L_integ    { PT _ (TI _)    }
  L_quoted   { PT _ (TL _)    }

%%

Ident :: { (AbsImper.BNFC'Position, AbsImper.Ident) }
Ident  : L_Ident { (uncurry AbsImper.BNFC'Position (tokenLineCol $1), AbsImper.Ident (tokenText $1)) }

Integer :: { (AbsImper.BNFC'Position, Integer) }
Integer  : L_integ  { (uncurry AbsImper.BNFC'Position (tokenLineCol $1), (read (tokenText $1)) :: Integer) }

String  :: { (AbsImper.BNFC'Position, String) }
String   : L_quoted { (uncurry AbsImper.BNFC'Position (tokenLineCol $1), ((\(PT _ (TL s)) -> s) $1)) }

Program :: { (AbsImper.BNFC'Position, AbsImper.Program) }
Program
  : ListProgStmt { (fst $1, AbsImper.Prog (fst $1) (snd $1)) }

ProgStmt :: { (AbsImper.BNFC'Position, AbsImper.ProgStmt) }
ProgStmt
  : 'fun' Ident '(' ListArg ')' Block ';' { (uncurry AbsImper.BNFC'Position (tokenLineCol $1), AbsImper.FnDef (uncurry AbsImper.BNFC'Position (tokenLineCol $1)) (snd $2) (snd $4) (snd $6)) }
  | Stmt { (fst $1, AbsImper.ProgSt (fst $1) (snd $1)) }

ListProgStmt :: { (AbsImper.BNFC'Position, [AbsImper.ProgStmt]) }
ListProgStmt
  : ProgStmt { (fst $1, (:[]) (snd $1)) }
  | ProgStmt ListProgStmt { (fst $1, (:) (snd $1) (snd $2)) }

Arg :: { (AbsImper.BNFC'Position, AbsImper.Arg) }
Arg
  : Type Ident { (fst $1, AbsImper.FnArg (fst $1) (snd $1) (snd $2)) }

ListArg :: { (AbsImper.BNFC'Position, [AbsImper.Arg]) }
ListArg
  : {- empty -} { (AbsImper.BNFC'NoPosition, []) }
  | Arg { (fst $1, (:[]) (snd $1)) }
  | Arg ',' ListArg { (fst $1, (:) (snd $1) (snd $3)) }

Block :: { (AbsImper.BNFC'Position, AbsImper.Block) }
Block
  : '{' ListStmt '};' { (uncurry AbsImper.BNFC'Position (tokenLineCol $1), AbsImper.StBlock (uncurry AbsImper.BNFC'Position (tokenLineCol $1)) (snd $2)) }

ListStmt :: { (AbsImper.BNFC'Position, [AbsImper.Stmt]) }
ListStmt
  : {- empty -} { (AbsImper.BNFC'NoPosition, []) }
  | Stmt ListStmt { (fst $1, (:) (snd $1) (snd $2)) }

Stmt :: { (AbsImper.BNFC'Position, AbsImper.Stmt) }
Stmt
  : 'var' AStmt ';' { (uncurry AbsImper.BNFC'Position (tokenLineCol $1), AbsImper.Decl (uncurry AbsImper.BNFC'Position (tokenLineCol $1)) (snd $2)) }
  | 'const' AStmt ';' { (uncurry AbsImper.BNFC'Position (tokenLineCol $1), AbsImper.DeclRO (uncurry AbsImper.BNFC'Position (tokenLineCol $1)) (snd $2)) }
  | AStmt ';' { (fst $1, AbsImper.AssStmt (fst $1) (snd $1)) }
  | TBox ':=' Expr ';' { (fst $1, AbsImper.TupleAss (fst $1) (snd $1) (snd $3)) }
  | IfBl ListElifBl { (fst $1, AbsImper.Cond (fst $1) (snd $1) (snd $2)) }
  | IfBl ListElifBl ElseBl { (fst $1, AbsImper.CondElse (fst $1) (snd $1) (snd $2) (snd $3)) }
  | 'for' AStmt 'to' Expr Block { (uncurry AbsImper.BNFC'Position (tokenLineCol $1), AbsImper.For (uncurry AbsImper.BNFC'Position (tokenLineCol $1)) (snd $2) (snd $4) (snd $5)) }
  | 'while' '(' Expr ')' Block { (uncurry AbsImper.BNFC'Position (tokenLineCol $1), AbsImper.While (uncurry AbsImper.BNFC'Position (tokenLineCol $1)) (snd $3) (snd $5)) }
  | 'return' Expr ';' { (uncurry AbsImper.BNFC'Position (tokenLineCol $1), AbsImper.Ret (uncurry AbsImper.BNFC'Position (tokenLineCol $1)) (snd $2)) }
  | 'break' ';' { (uncurry AbsImper.BNFC'Position (tokenLineCol $1), AbsImper.Break (uncurry AbsImper.BNFC'Position (tokenLineCol $1))) }
  | 'continue' ';' { (uncurry AbsImper.BNFC'Position (tokenLineCol $1), AbsImper.Continue (uncurry AbsImper.BNFC'Position (tokenLineCol $1))) }
  | 'print' Expr ';' { (uncurry AbsImper.BNFC'Position (tokenLineCol $1), AbsImper.Print (uncurry AbsImper.BNFC'Position (tokenLineCol $1)) (snd $2)) }
  | 'skip' ';' { (uncurry AbsImper.BNFC'Position (tokenLineCol $1), AbsImper.Skip (uncurry AbsImper.BNFC'Position (tokenLineCol $1))) }
  | Expr ';' { (fst $1, AbsImper.SExp (fst $1) (snd $1)) }

AStmt :: { (AbsImper.BNFC'Position, AbsImper.AStmt) }
AStmt
  : Ident ':=' Expr { (fst $1, AbsImper.Ass (fst $1) (snd $1) (snd $3)) }

TBox :: { (AbsImper.BNFC'Position, AbsImper.TBox) }
TBox
  : '(' ListTElem ')' { (uncurry AbsImper.BNFC'Position (tokenLineCol $1), AbsImper.TupleBox (uncurry AbsImper.BNFC'Position (tokenLineCol $1)) (snd $2)) }

TElem :: { (AbsImper.BNFC'Position, AbsImper.TElem) }
TElem
  : TBox { (fst $1, AbsImper.TupleTup (fst $1) (snd $1)) }
  | Ident { (fst $1, AbsImper.TupleAtom (fst $1) (snd $1)) }
  | '_' { (uncurry AbsImper.BNFC'Position (tokenLineCol $1), AbsImper.TupleIgn (uncurry AbsImper.BNFC'Position (tokenLineCol $1))) }

ListTElem :: { (AbsImper.BNFC'Position, [AbsImper.TElem]) }
ListTElem
  : {- empty -} { (AbsImper.BNFC'NoPosition, []) }
  | TElem { (fst $1, (:[]) (snd $1)) }
  | TElem ',' ListTElem { (fst $1, (:) (snd $1) (snd $3)) }

IfBl :: { (AbsImper.BNFC'Position, AbsImper.IfBl) }
IfBl
  : 'if' '(' Expr ')' Block { (uncurry AbsImper.BNFC'Position (tokenLineCol $1), AbsImper.IfBlock (uncurry AbsImper.BNFC'Position (tokenLineCol $1)) (snd $3) (snd $5)) }

ElifBl :: { (AbsImper.BNFC'Position, AbsImper.ElifBl) }
ElifBl
  : 'elif' '(' Expr ')' Block { (uncurry AbsImper.BNFC'Position (tokenLineCol $1), AbsImper.ElifBlock (uncurry AbsImper.BNFC'Position (tokenLineCol $1)) (snd $3) (snd $5)) }

ElseBl :: { (AbsImper.BNFC'Position, AbsImper.ElseBl) }
ElseBl
  : 'else' Block { (uncurry AbsImper.BNFC'Position (tokenLineCol $1), AbsImper.ElseBlock (uncurry AbsImper.BNFC'Position (tokenLineCol $1)) (snd $2)) }

ListElifBl :: { (AbsImper.BNFC'Position, [AbsImper.ElifBl]) }
ListElifBl
  : {- empty -} { (AbsImper.BNFC'NoPosition, []) }
  | ElifBl ListElifBl { (fst $1, (:) (snd $1) (snd $2)) }

Type :: { (AbsImper.BNFC'Position, AbsImper.Type) }
Type
  : 'int' { (uncurry AbsImper.BNFC'Position (tokenLineCol $1), AbsImper.Int (uncurry AbsImper.BNFC'Position (tokenLineCol $1))) }
  | 'string' { (uncurry AbsImper.BNFC'Position (tokenLineCol $1), AbsImper.Str (uncurry AbsImper.BNFC'Position (tokenLineCol $1))) }
  | 'bool' { (uncurry AbsImper.BNFC'Position (tokenLineCol $1), AbsImper.Bool (uncurry AbsImper.BNFC'Position (tokenLineCol $1))) }
  | '(' ListType ')' { (uncurry AbsImper.BNFC'Position (tokenLineCol $1), AbsImper.Tuple (uncurry AbsImper.BNFC'Position (tokenLineCol $1)) (snd $2)) }

ListType :: { (AbsImper.BNFC'Position, [AbsImper.Type]) }
ListType
  : {- empty -} { (AbsImper.BNFC'NoPosition, []) }
  | Type { (fst $1, (:[]) (snd $1)) }
  | Type ',' ListType { (fst $1, (:) (snd $1) (snd $3)) }

Expr6 :: { (AbsImper.BNFC'Position, AbsImper.Expr) }
Expr6
  : Ident { (fst $1, AbsImper.EVar (fst $1) (snd $1)) }
  | Integer { (fst $1, AbsImper.ELitInt (fst $1) (snd $1)) }
  | '_T' { (uncurry AbsImper.BNFC'Position (tokenLineCol $1), AbsImper.ELitTrue (uncurry AbsImper.BNFC'Position (tokenLineCol $1))) }
  | '_F' { (uncurry AbsImper.BNFC'Position (tokenLineCol $1), AbsImper.ELitFalse (uncurry AbsImper.BNFC'Position (tokenLineCol $1))) }
  | '(' ListExpr ')' { (uncurry AbsImper.BNFC'Position (tokenLineCol $1), AbsImper.ELitTuple (uncurry AbsImper.BNFC'Position (tokenLineCol $1)) (snd $2)) }
  | Ident '(' ListExpr ')' { (fst $1, AbsImper.EApp (fst $1) (snd $1) (snd $3)) }
  | String { (fst $1, AbsImper.EString (fst $1) (snd $1)) }
  | '(' Expr ')' { (uncurry AbsImper.BNFC'Position (tokenLineCol $1), (snd $2)) }

Expr5 :: { (AbsImper.BNFC'Position, AbsImper.Expr) }
Expr5
  : '-' Expr6 { (uncurry AbsImper.BNFC'Position (tokenLineCol $1), AbsImper.Neg (uncurry AbsImper.BNFC'Position (tokenLineCol $1)) (snd $2)) }
  | '!' Expr6 { (uncurry AbsImper.BNFC'Position (tokenLineCol $1), AbsImper.Not (uncurry AbsImper.BNFC'Position (tokenLineCol $1)) (snd $2)) }
  | Expr6 { (fst $1, (snd $1)) }

Expr4 :: { (AbsImper.BNFC'Position, AbsImper.Expr) }
Expr4
  : Expr4 MulOp Expr5 { (fst $1, AbsImper.EMul (fst $1) (snd $1) (snd $2) (snd $3)) }
  | Expr5 { (fst $1, (snd $1)) }

Expr3 :: { (AbsImper.BNFC'Position, AbsImper.Expr) }
Expr3
  : Expr3 AddOp Expr4 { (fst $1, AbsImper.EAdd (fst $1) (snd $1) (snd $2) (snd $3)) }
  | Expr4 { (fst $1, (snd $1)) }

Expr2 :: { (AbsImper.BNFC'Position, AbsImper.Expr) }
Expr2
  : Expr2 RelOp Expr3 { (fst $1, AbsImper.ERel (fst $1) (snd $1) (snd $2) (snd $3)) }
  | Expr3 { (fst $1, (snd $1)) }

Expr1 :: { (AbsImper.BNFC'Position, AbsImper.Expr) }
Expr1
  : Expr2 '&&' Expr1 { (fst $1, AbsImper.EAnd (fst $1) (snd $1) (snd $3)) }
  | Expr2 { (fst $1, (snd $1)) }

Expr :: { (AbsImper.BNFC'Position, AbsImper.Expr) }
Expr
  : Expr1 '||' Expr { (fst $1, AbsImper.EOr (fst $1) (snd $1) (snd $3)) }
  | Expr1 { (fst $1, (snd $1)) }

ListExpr :: { (AbsImper.BNFC'Position, [AbsImper.Expr]) }
ListExpr
  : {- empty -} { (AbsImper.BNFC'NoPosition, []) }
  | Expr { (fst $1, (:[]) (snd $1)) }
  | Expr ',' ListExpr { (fst $1, (:) (snd $1) (snd $3)) }

AddOp :: { (AbsImper.BNFC'Position, AbsImper.AddOp) }
AddOp
  : '+' { (uncurry AbsImper.BNFC'Position (tokenLineCol $1), AbsImper.Plus (uncurry AbsImper.BNFC'Position (tokenLineCol $1))) }
  | '-' { (uncurry AbsImper.BNFC'Position (tokenLineCol $1), AbsImper.Minus (uncurry AbsImper.BNFC'Position (tokenLineCol $1))) }

MulOp :: { (AbsImper.BNFC'Position, AbsImper.MulOp) }
MulOp
  : '*' { (uncurry AbsImper.BNFC'Position (tokenLineCol $1), AbsImper.Times (uncurry AbsImper.BNFC'Position (tokenLineCol $1))) }
  | '/' { (uncurry AbsImper.BNFC'Position (tokenLineCol $1), AbsImper.Div (uncurry AbsImper.BNFC'Position (tokenLineCol $1))) }
  | '%' { (uncurry AbsImper.BNFC'Position (tokenLineCol $1), AbsImper.Mod (uncurry AbsImper.BNFC'Position (tokenLineCol $1))) }

RelOp :: { (AbsImper.BNFC'Position, AbsImper.RelOp) }
RelOp
  : '<' { (uncurry AbsImper.BNFC'Position (tokenLineCol $1), AbsImper.LTH (uncurry AbsImper.BNFC'Position (tokenLineCol $1))) }
  | '<=' { (uncurry AbsImper.BNFC'Position (tokenLineCol $1), AbsImper.LE (uncurry AbsImper.BNFC'Position (tokenLineCol $1))) }
  | '>' { (uncurry AbsImper.BNFC'Position (tokenLineCol $1), AbsImper.GTH (uncurry AbsImper.BNFC'Position (tokenLineCol $1))) }
  | '>=' { (uncurry AbsImper.BNFC'Position (tokenLineCol $1), AbsImper.GE (uncurry AbsImper.BNFC'Position (tokenLineCol $1))) }
  | '==' { (uncurry AbsImper.BNFC'Position (tokenLineCol $1), AbsImper.EQU (uncurry AbsImper.BNFC'Position (tokenLineCol $1))) }
  | '!=' { (uncurry AbsImper.BNFC'Position (tokenLineCol $1), AbsImper.NE (uncurry AbsImper.BNFC'Position (tokenLineCol $1))) }

{

type Err = Either String

happyError :: [Token] -> Err a
happyError ts = Left $
  "syntax error at " ++ tokenPos ts ++
  case ts of
    []      -> []
    [Err _] -> " due to lexer error"
    t:_     -> " before `" ++ (prToken t) ++ "'"

myLexer :: String -> [Token]
myLexer = tokens

-- Entrypoints

pProgram :: [Token] -> Err AbsImper.Program
pProgram = fmap snd . pProgram_internal
}

